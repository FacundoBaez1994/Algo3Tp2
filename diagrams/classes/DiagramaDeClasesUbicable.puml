@startuml
title Diagrama de Clase Ubicables
Grilla "1" -d-> "*" Ubicables
Ubicables .r.> Vehiculo

SorpresaFav .u.|> Ubicables
SorpresaNoFav .u.|> Ubicables
CambioDeVehiculo .u.|>  Ubicables
Pozo .u.|> Ubicables
Piquete .u.|> Ubicables
ControlPolicial .u.|> Ubicables
NoObstaculo .u.|> Ubicables

SorpresaFav -d-> Posicion
SorpresaNoFav -d-> Posicion
CambioDeVehiculo -d-> Posicion
Pozo -d-> Posicion
Piquete -d-> Posicion
ControlPolicial -d-> Posicion
NoObstaculo -d-> Posicion



interface Ubicables {
    + {abstract} estaEnPosicion(Posicion): boolean
    + {abstract} serEncontradoPor(Vehiculo): void
}

class SorpresaFav {
- porcentaje: double
    + estaEnPosicion(Posicion): boolean
    + serEncontradoPor(Vehiculo): void
}

class SorpresaNoFav {
- porcentaje: double
+ estaEnPosicion(Posicion): boolean
 + serEncontradoPor(Vehiculo): void
}

class CambioDeVehiculo {
+ cambioDeVehiculo(): void
    + estaEnPosicion(Posicion): boolean
    + serEncontradoPor(Vehiculo): void
}

class Pozo {
+ estaEnPosicion(Posicion:): boolean
 + serEncontradoPor(Vehiculo:): void
 + calcularPenalizacion(TipoDeVehiculo:):int
}

class ControlPolicial {
+ estaEnPosicion(Posicion:): boolean
 + serEncontradoPor(Vehiculo:): void
 + calcularPenalizacion(TipoDeVehiculo:):int
}
class Piquete {
+ estaEnPosicion(Posicion:): boolean
 + serEncontradoPor(Vehiculo:): void
 + calcularPenalizacion(TipoDeVehiculo:):int
}
class NoObstaculo {
+ estaEnPosicion(Posicion:): boolean
 + serEncontradoPor(Vehiculo:): void
 + calcularPenalizacion(TipoDeVehiculo:):int
}
class Posicion {
    # int coordenadaX;
    # int coordenadaY;
    + Posicion(X:int, Y:int): void
    + sumarCoordenadas (Posicion) : void
    + igualA (Posicion) :  boolean
}


@enduml