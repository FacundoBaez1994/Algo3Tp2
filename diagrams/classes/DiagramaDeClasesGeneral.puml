@startuml
'Una moto atraviesa la grilla sin obstÃ¡culos y la cantidad de movimientos es X
class Vehiculo {
    - Esquina posicion;
    - TipoDeVehiculo unTipoDeVehiculo;
    - int cantidadDeMovimientos;
    +  moverseHacia (Direccion unaDireccion): void
    + afectarMovimientos(Obstaculo unObstaculo): void
    + getCantidadDeMovimientos (): int
}
Vehiculo"1" ..>  "1" Obstaculo

class Jugador {
    + moverVehiculoHacia (unaDireccion): void
}

class PuntajesAltos{
-ListaDeJugadores
}

class Grilla

Abstract class Calle{
    # Esquina esquinaDeUnLado
    # Esquina esquinaDelotroLado
    + {abstract} obtenerEsquinaOpuesta (Esquina esquinaOrigen) :Esquina
    + {abstract} serTransitada (Vehiculo unVehiculo) : Esquina
}
Calle "1" ..>  "1" Vehiculo

interface Movimiento {
+ {abstract} mover(Calle unaCalle, Vehiculo unVehiculo ) : void
}

abstract class Esquina {
    # int coordenadaX;
    # int coordenadaY;
    # ArrayList Calle unasCalles
    + {abstract} setearCalleEnDireccion (Calle calle, Direccion unaDireccion) : void
    + {abstract} obtenerCalleEnDireccion (Direccion unaDireccion) :  Calle
}
Esquina "1" *-- "1..*" Calle
Esquina "1" ..>  "1" Direccion


abstract class TipoDeVehiculo {
    + {abstract} calcularPenalizacion (Obstaculo unObstaculo): int
}
TipoDeVehiculo"1" ..>  "1" Obstaculo

interface Direccion

interface Obstaculo {
   + {abstract} equals (Obstaculo unObstaculo): boolean
 }

abstract class Visibilidad
Calle "1" *-- "1" Visibilidad
Esquina "1" *-- "1" Visibilidad

class Juego
Juego "1" *-- "*" Jugador
Juego "1" *-- "*" PuntajesAltos



interface Sorpresa

Calle "1" *-- "2" Esquina


Calle "1" o-- "*" Sorpresa
Calle "1" o-- "*" Obstaculo
Vehiculo "1" --> "1" Esquina
Grilla  "1" *-- "*" Esquina
Grilla  "1" *-- "*" Calle
Juego "1" *-- "1" Grilla
Jugador "1" o-- "1" Vehiculo
Vehiculo "1" ..>  "1" Movimiento
Vehiculo "1" ..>  "1" Direccion
Movimiento "1" *-- "1"Direccion
Vehiculo "1" *-- "1"TipoDeVehiculo




@endu
--------------------------------------------------
@startuml
'https://plantuml.com/sequence-diagram

autonumber

":TestCase" -> ":Vehiculo": MoverHacia(derecha: DirDerecha)
":Vehiculo" -> "derecha:DirDerecha":

@enduml
qqv-duno-sdf